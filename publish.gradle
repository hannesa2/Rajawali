apply plugin: "org.jetbrains.dokka"
apply plugin: "digital.wup.android-maven-publish"
apply plugin: "signing"
apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.6"
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ["jdk.internal.*"]
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Combine code coverage to unified report."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ["**/R.class", "**/R*.class", "**/BuildConfig.*", "**/Manifest*.*", "**/*Test*.*", "android/**/*.*"]
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    def ecSrc = fileTree(dir: "$project.buildDir", include: "**/*.ec")
    def execSrc = fileTree(dir: "$project.buildDir", include: "**/*.exec")

    doFirst {
        def files = files([ecSrc, execSrc]).files
        println "Creating Jacoco Report for ${files.size()} coverage files"
        files.each { file -> println file }
    }
}

task dokkaJar(type: Jar, dependsOn: dokkaHtmlPartial) {
    classifier = "javadoc"
    from "$buildDir/dokka/htmlPartial"
}

tasks.named("dokkaHtml") {
    outputDirectory.set(buildDir.resolve("dokka"))
}

task androidSourcesJar(type: Jar) {
    classifier = "sources"
    from android.sourceSets.main.java.srcDirs
}

publishing {
    repositories {
        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"

        if (!version.contains("DIRTY")) {
            maven {
                url !version.contains("SNAPSHOT") ? releaseUrl : snapshotUrl
                credentials {
                    username System.getenv("SONATYPE_USERNAME") ?: ""
                    password System.getenv("SONATYPE_PASSWORD") ?: ""
                }
            }
        }
    }
}

signing {
    required false
    sign publishing.publications
}
